{
	"info": {
		"_postman_id": "82c1f54d-fdec-4790-8935-1d26bd775e8e",
		"name": "Desafio-Falabella-Photos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET - Photos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validamos que el status sea 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validamos que la estructura de los posts sea la correcta\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"albumId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"    pm.expect(pm.response.text()).to.include(\"url\");\r",
							"    pm.expect(pm.response.text()).to.include(\"thumbnailUrl\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header es application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Tiempo de respuesta debe ser menor a 500\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//Desafio//\r",
							"\r",
							"pm.test(\"Verify required fields and body respose\"  , function () {\r",
							"  \r",
							"    var jsonData = pm.response.json();\r",
							"    if (!jsonData.length <0){\r",
							"        \r",
							"    \r",
							"    for (var i = 0; i < jsonData.length; i++) {  \r",
							"         pm.expect(jsonData[i].id, \"id is not available\").not.equal(null);\r",
							"         pm.expect(jsonData[i].id, \"id is not available\").to.be.a('number');\r",
							"         pm.expect(jsonData[i].title, \"title is not available\").not.equal(null);\r",
							"         pm.expect(jsonData[i].url, \"url is not available\").not.equal(null);\r",
							"         pm.expect(jsonData[i].thumbnailUrl, \"thumbnailUrl is not available\").not.equal(null);\r",
							"         \r",
							"         }  \r",
							"      \r",
							"}else{\r",
							"    console.log(\"Error in Body\")\r",
							"    \r",
							"\r",
							"\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/{{endPointPhotos}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{endPointPhotos}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Photos Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validamos que el status sea 404 al ingresar EndPoint incorrecto\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/photo",
					"host": [
						"{{host}}"
					],
					"path": [
						"photo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Photo especifico",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validar que trae el objeto que le especficiamos\", () => {\r",
							"  pm.expect(jsonData.url).to.include(\"https://via.placeholder.com/600/92c952\");\r",
							"});\r",
							"\r",
							"\r",
							"//Desafio//\r",
							"pm.test(\"Verify status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"minor answer to 500\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Connection\", () => {\r",
							"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"});\r",
							"\r",
							"pm.test(\"Cache-Status\", () => {\r",
							"    pm.expect(pm.response.headers.get('CF-Cache-Status')).to.eql('HIT');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{endPointPhotos}}/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{endPointPhotos}}",
						"1"
					]
				}
			},
			"response": []
		}
	]
}